- AsyncIO excels in I/O-bound tasks, such as network operations, where the program spends significant time waiting for external responses, allowing other tasks to proceed concurrently.

- Exception handling in async functions in Python follows the same try-except pattern as synchronous code. When awaiting an async function, exceptions can be caught and handled in the except block.

- Every async function is called a coroutine, and they have the property of being flexible, receiving suspensions and resumes from the event loop management in order the code to be executed concurrently

- The 'await' syntax is used within coroutines to 'await' the execution of an asynchronous operation

- Coroutines can await other coroutines or asynchronous operations (it depends on the logic being applied)

- And they can also be awaited concurrently/simultaneously with the help of asyncio.gather (which is managed by the event loop)

- The asyncio.run function is a convenient way to run a coroutine and manage the event loop lifecycle. We normally apply it to our main coroutine (which can call others or not, but usually it does)
    - This function creates a new event loop, runs the provided coroutine, and automatically handles the cleanup of resources and event loop closing

- For more control it is possible to create event loops manually using asyncio.new_event_loop and running them with asyncio.run_until_complete. This approach does exists, but is way more complicated.

- Tasks are the primary building blocks for executing and managing asynchronous operations in AsyncIO. Understanging then how to create, schedule and manage tasks is crucial for developing efficient and scalable asynchronous applications

- The asyncio.create_task function creates a Task object from the provided corroutine. The main coroutine awaits the completion of the Task, allowing the event loop to run the coroutine concurrently.

- As we already have seen, the asyncio.gather function can be used to schedule and await multiple Tasks concurrently. The event loop manages the concurrent execution of all the tasks gathered.

- AsyncIO supports the work/connection with various databases through asynchronous database drivers. Popular asynchronous drivers include:
    - AsyncPG (for PostgreSQL)
    - Motor (for MongoDB)
    - Aio_pika (for RabbitMQ)
    - Asyncio Redis (for Redis)
    - aiosqlite (for sqlite)
    - aioodbc (for SQL Server)

- Asyncio also provides mechanisms to integrate with synchronous code and libraries, allowing for seamless interoperability. The 'asyncio.run_in_executor' method chan offload synchronous code to separate threads or process pools, preventing the event loop from being blocked.
    - There are also asynchronous wrappers, which can be created around synchronous functions to make them compatible with Asyncio

- The logging module in Python provides a flexible and configurable logging system. We can use it to log messages at different levels (e.g., debug, info) throughout the application. They also help to track the flow of execution and identify potential issues.

- Asyncio also provides a debbuging mode that can be enabled using 'asyncio.get_event_loop().set_debug(True)'. This option must be set before the awaiting of the main coroutine and, during the code execution, it will emit additional debug information and warnings